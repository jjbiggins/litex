#
# This file is part of LiteX.
#
# Copyright (c) 2014-2020 Florent Kermarrec <florent@enjoy-digital.fr>
# SPDX-License-Identifier: BSD-2-Clause

import os
import subprocess
import sys
import math
from shutil import which

from migen.fhdl.structure import _Fragment

from litex.build.generic_platform import *
from litex.build import tools
from litex.build.xilinx import common

# Constraints (.xdc) -------------------------------------------------------------------------------

def _xdc_separator(msg):
    r =  "#"*80 + "\n"
    r += f"# {msg}" + "\n"
    r += "#"*80 + "\n"
    return r

def _format_xdc_constraint(c):
    if isinstance(c, Pins):
        return f"set_property LOC {c.identifiers[0]}"
    elif isinstance(c, IOStandard):
        return f"set_property IOSTANDARD {c.name}"
    elif isinstance(c, Drive):
        return f"set_property DRIVE {str(c.strength)}"
    elif isinstance(c, Misc):
        return "set_property " + c.misc.replace("=", " ")
    elif isinstance(c, Inverted):
        return None
    else:
        raise ValueError(f"unknown constraint {c}")


def _format_xdc(signame, resname, *constraints):
    fmt_c = [_format_xdc_constraint(c) for c in constraints]
    fmt_r = f"{resname[0]}:{str(resname[1])}"
    if resname[2] is not None:
        fmt_r += f".{resname[2]}"
    r = f"# {fmt_r}\n"
    for c in fmt_c:
        if c is not None:
            r += c + " [get_ports {" + signame + "}]\n"
    r += "\n"
    return r


def _build_xdc(named_sc, named_pc):
    r = _xdc_separator("IO constraints")
    for sig, pins, others, resname in named_sc:
        if len(pins) > 1:
            for i, p in enumerate(pins):
                r += _format_xdc(f"{sig}[{str(i)}]", resname, Pins(p), *others)
        elif pins:
            r += _format_xdc(sig, resname, Pins(pins[0]), *others)
        else:
            r += _format_xdc(sig, resname, *others)
    if named_pc:
        r += _xdc_separator("Design constraints")
        r += "\n" + "\n\n".join(named_pc)
    return r

# Script -------------------------------------------------------------------------------------------

def _build_script(build_name):
    if sys.platform in ["win32", "cygwin"]:
        script_contents = (
            f"REM Autogenerated by LiteX / git: {tools.get_litex_git_revision()}"
            + "\n"
        )

        script_contents += f"vivado -mode batch -source {build_name}" + ".tcl\n"
        script_file = f"build_{build_name}.bat"
    else:
        script_contents = (
            f"# Autogenerated by LiteX / git: {tools.get_litex_git_revision()}"
            + "\nset -e\n"
        )

        if os.getenv("LITEX_ENV_VIVADO", False):
            script_contents += "source " + os.path.join(os.getenv("LITEX_ENV_VIVADO"), "settings64.sh\n")
        script_contents += f"vivado -mode batch -source {build_name}" + ".tcl\n"
        script_file = f"build_{build_name}.sh"
    tools.write_to_file(script_file, script_contents)
    return script_file

def _run_script(script):
    shell = ["cmd", "/c"] if sys.platform in ["win32", "cygwin"] else ["bash"]
    if which("vivado") is None and os.getenv("LITEX_ENV_VIVADO", False) == False:
        msg = (
            "Unable to find or source Vivado toolchain, please either:\n"
            + "- Source Vivado's settings manually.\n"
        )

        msg += "- Or set LITEX_ENV_VIVADO environment variant to Vivado's settings path.\n"
        msg += "- Or add Vivado toolchain to your $PATH."
        raise OSError(msg)

    if tools.subprocess_call_filtered(shell + [script], common.colors) != 0:
        raise OSError("Error occured during Vivado's script execution.")

# XilinxVivadoToolchain ----------------------------------------------------------------------------

class XilinxVivadoCommands(list):
    def add(self, command, **signals):
        self.append((command, signals))

    def resolve(self, vns):
        named_commands = []
        for command in self:
            if isinstance(command, str):
                named_commands.append(command)
            else:
                template, args = command
                name_dict = {k: vns.get_name(sig) for k, sig in args.items()}
                named_commands.append(template.format(**name_dict))
        return named_commands


class XilinxVivadoToolchain:
    attr_translate = {
        "keep":            ("dont_touch", "true"),
        "no_retiming":     ("dont_touch", "true"),
        "async_reg":       ("async_reg",  "true"),
        "mr_ff":           ("mr_ff",      "true"), # user-defined attribute
        "ars_ff1":         ("ars_ff1",    "true"), # user-defined attribute
        "ars_ff2":         ("ars_ff2",    "true"), # user-defined attribute
        "no_shreg_extract": None
    }

    def __init__(self):
        self.bitstream_commands                   = []
        self.additional_commands                  = []
        self.pre_synthesis_commands               = XilinxVivadoCommands()
        self.pre_placement_commands               = XilinxVivadoCommands()
        self.pre_routing_commands                 = XilinxVivadoCommands()
        self.incremental_implementation           = False
        self.vivado_synth_directive               = "default"
        self.opt_directive                        = "default"
        self.vivado_place_directive               = "default"
        self.vivado_post_place_phys_opt_directive = None
        self.vivado_route_directive               = "default"
        self.vivado_post_route_phys_opt_directive = "default"
        self.clocks = {}
        self.false_paths = set()

    def _build_tcl(self, platform, build_name, synth_mode, enable_xpm, vns):
        assert synth_mode in ["vivado", "yosys"]
        tcl = [
            "\n# Create Project\n",
            f"create_project -force -name {build_name} -part {platform.device}",
            "set_msg_config -id {Common 17-55} -new_severity {Warning}",
        ]


        # Enable Xilinx Parameterized Macros
        if enable_xpm:
            tcl.extend(
                (
                    "\n# Enable Xilinx Parameterized Macros\n",
                    "set_property XPM_LIBRARIES {XPM_CDC XPM_MEMORY} [current_project]",
                )
            )

        # Add sources (when Vivado used for synthesis)
        if synth_mode == "vivado":
            tcl.append("\n# Add Sources\n")
            # "-include_dirs {}" crashes Vivado 2016.4
            for filename, language, library, *copy in platform.sources:
                filename_tcl = "{" + filename + "}"
                if language == "systemverilog":
                    tcl.append(f"read_verilog -v {filename_tcl}")
                    tcl.append(f"set_property file_type SystemVerilog [get_files {filename_tcl}]")
                elif language == "verilog":
                    tcl.append(f"read_verilog {filename_tcl}")
                elif language == "vhdl":
                    tcl.append(f"read_vhdl -vhdl2008 {filename_tcl}")
                    tcl.append(f"set_property library {library} [get_files {filename_tcl}]")
                else:
                    tcl.append(f"add_files {filename_tcl}")

        # Add EDIFs
        tcl.append("\n# Add EDIFs\n")
        for filename in platform.edifs:
            filename_tcl = "{" + filename + "}"
            tcl.append(f"read_edif {filename_tcl}")

        # Add IPs
        tcl.append("\n# Add IPs\n")
        for filename, disable_constraints in platform.ips.items():
            if filename.endswith("tcl"):
                tcl += open(filename, "r").read().splitlines()
            else:
                filename_tcl = "{" + filename + "}"
                ip = os.path.splitext(os.path.basename(filename))[0]
                tcl.append(f"read_ip {filename_tcl}")
                tcl.append(f"upgrade_ip [get_ips {ip}]")
                tcl.append(f"generate_target all [get_ips {ip}]")
                tcl.append(f"synth_ip [get_ips {ip}] -force")
                tcl.append(f"get_files -all -of_objects [get_files {filename_tcl}]")
                if disable_constraints:
                    tcl.append("set_property is_enabled false [get_files -of_objects [get_files {}] -filter {{FILE_TYPE== XDC}}]".format(filename_tcl))

        # Add constraints
        tcl.append("\n# Add constraints\n")
        tcl.append(f"read_xdc {build_name}.xdc")
        tcl.append(f"set_property PROCESSING_ORDER EARLY [get_files {build_name}.xdc]")

        # Add pre-synthesis commands
        tcl.append("\n# Add pre-synthesis commands\n")
        tcl.extend(c.format(build_name=build_name) for c in self.pre_synthesis_commands.resolve(vns))

        # Synthesis
        if synth_mode == "vivado":
            tcl.append("\n# Synthesis\n")
            synth_cmd = f"synth_design -directive {self.vivado_synth_directive} -top {build_name} -part {platform.device}"

            if platform.verilog_include_paths:
                synth_cmd += " -include_dirs {{{}}}".format(" ".join(platform.verilog_include_paths))
            tcl.append(synth_cmd)
        elif synth_mode == "yosys":
            tcl.append("\n# Read Yosys EDIF\n")
            tcl.append(f"read_edif {build_name}.edif")
            tcl.append(f"link_design -top {build_name} -part {platform.device}")
        else:
            raise OSError(f"Unknown synthesis mode! {synth_mode}")
        tcl.append("\n# Synthesis report\n")
        tcl.append(f"report_timing_summary -file {build_name}_timing_synth.rpt")
        tcl.append(
            f"report_utilization -hierarchical -file {build_name}_utilization_hierarchical_synth.rpt"
        )

        tcl.append(f"report_utilization -file {build_name}_utilization_synth.rpt")

        # Optimize
        tcl.append("\n# Optimize design\n")
        tcl.append(f"opt_design -directive {self.opt_directive}")

        # Incremental implementation
        if self.incremental_implementation:
            tcl.append("\n# Read design checkpoint\n")
            tcl.append(f"read_checkpoint -incremental {build_name}_route.dcp")

        # Add pre-placement commands
        tcl.append("\n# Add pre-placement commands\n")
        tcl.extend(c.format(build_name=build_name) for c in self.pre_placement_commands.resolve(vns))

        # Placement
        tcl.append("\n# Placement\n")
        tcl.append(f"place_design -directive {self.vivado_place_directive}")
        if self.vivado_post_place_phys_opt_directive:
            tcl.append(
                f"phys_opt_design -directive {self.vivado_post_place_phys_opt_directive}"
            )

        tcl.append("\n# Placement report\n")
        tcl.append(
            f"report_utilization -hierarchical -file {build_name}_utilization_hierarchical_place.rpt"
        )

        tcl.append(f"report_utilization -file {build_name}_utilization_place.rpt")
        tcl.append(f"report_io -file {build_name}_io.rpt")
        tcl.append(f"report_control_sets -verbose -file {build_name}_control_sets.rpt")
        tcl.append(
            f"report_clock_utilization -file {build_name}_clock_utilization.rpt"
        )


        # Add pre-routing commands
        tcl.append("\n# Add pre-routing commands\n")
        tcl.extend(c.format(build_name=build_name) for c in self.pre_routing_commands.resolve(vns))

        # Routing
        tcl.append("\n# Routing\n")
        tcl.append(f"route_design -directive {self.vivado_route_directive}")
        tcl.append(
            f"phys_opt_design -directive {self.vivado_post_route_phys_opt_directive}"
        )

        tcl.append(f"write_checkpoint -force {build_name}_route.dcp")
        tcl.append("\n# Routing report\n")
        tcl.append("report_timing_summary -no_header -no_detailed_paths")
        tcl.append(f"report_route_status -file {build_name}_route_status.rpt")
        tcl.append(f"report_drc -file {build_name}_drc.rpt")
        tcl.append(
            f"report_timing_summary -datasheet -max_paths 10 -file {build_name}_timing.rpt"
        )

        tcl.append(f"report_power -file {build_name}_power.rpt")
        for bitstream_command in self.bitstream_commands:
            tcl.append(bitstream_command.format(build_name=build_name))

        # Bitstream generation
        tcl.append("\n# Bitstream generation\n")
        tcl.append(f"write_bitstream -force {build_name}.bit ")
        for additional_command in self.additional_commands:
            tcl.append(additional_command.format(build_name=build_name))

        # Quit
        tcl.append("\n# End\n")
        tcl.append("quit")
        tools.write_to_file(f"{build_name}.tcl", "\n".join(tcl))

    def _build_clock_constraints(self, platform):
        platform.add_platform_command(_xdc_separator("Clock constraints"))
        def get_clk_type(clk):
            return {
                False :  "nets",
                True  : "ports",
            }[hasattr(clk, "port")]
        for clk, period in sorted(self.clocks.items(), key=lambda x: x[0].duid):
            platform.add_platform_command(
                "create_clock -name {clk} -period " + str(period) +
                " [get_" + get_clk_type(clk) + " {clk}]", clk=clk)
        for _from, _to in sorted(self.false_paths, key=lambda x: (x[0].duid, x[1].duid)):
            platform.add_platform_command(
                "set_clock_groups "
                "-group [get_clocks -include_generated_clocks -of [get_" + get_clk_type(_from) + " {_from}]] "
                "-group [get_clocks -include_generated_clocks -of [get_" + get_clk_type(_to)   + " {_to}]] "
                "-asynchronous",
                _from=_from, _to=_to)
        # Make sure add_*_constraint cannot be used again
        del self.clocks
        del self.false_paths

    def _build_false_path_constraints(self, platform):
        platform.add_platform_command(_xdc_separator("False path constraints"))
        # The asynchronous input to a MultiReg is a false path
        platform.add_platform_command(
            "set_false_path -quiet "
            "-through [get_nets -hierarchical -filter {{mr_ff == TRUE}}]"
        )
        # The asychronous reset input to the AsyncResetSynchronizer is a false path
        platform.add_platform_command(
            "set_false_path -quiet "
            "-to [get_pins -filter {{REF_PIN_NAME == PRE}} "
                "-of_objects [get_cells -hierarchical -filter {{ars_ff1 == TRUE || ars_ff2 == TRUE}}]]"
        )
        # clock_period-2ns to resolve metastability on the wire between the AsyncResetSynchronizer FFs
        platform.add_platform_command(
            "set_max_delay 2 -quiet "
            "-from [get_pins -filter {{REF_PIN_NAME == C}} "
                "-of_objects [get_cells -hierarchical -filter {{ars_ff1 == TRUE}}]] "
            "-to [get_pins -filter {{REF_PIN_NAME == D}} "
                "-of_objects [get_cells -hierarchical -filter {{ars_ff2 == TRUE}}]]"
        )


    def build(self, platform, fragment,
        build_dir  = "build",
        build_name = "top",
        run        = True,
        synth_mode = "vivado",
        enable_xpm = False,
        **kwargs):

        # Create build directory
        os.makedirs(build_dir, exist_ok=True)
        cwd = os.getcwd()
        os.chdir(build_dir)

        # Finalize design
        if not isinstance(fragment, _Fragment):
            fragment = fragment.get_fragment()
        platform.finalize(fragment)

        # Generate verilog
        v_output = platform.get_verilog(fragment, name=build_name, **kwargs)

        # Generate timing constraints
        self._build_clock_constraints(platform)
        self._build_false_path_constraints(platform)

        # Add verilog to project.
        named_sc, named_pc = platform.resolve_signals(v_output.ns)
        v_file = f"{build_name}.v"
        v_output.write(v_file)
        platform.add_source(v_file)

        # Generate design project (.tcl)
        self._build_tcl(
            platform   = platform,
            build_name = build_name,
            synth_mode = synth_mode,
            enable_xpm = enable_xpm,
            vns        = v_output.ns,
        )

        # Generate design constraints (.xdc)
        tools.write_to_file(f"{build_name}.xdc", _build_xdc(named_sc, named_pc))

        # Run
        if run:
            if synth_mode == "yosys":
                common._run_yosys(platform.device, platform.sources, platform.verilog_include_paths, build_name)
            script = _build_script(build_name)
            _run_script(script)

        os.chdir(cwd)

        return v_output.ns

    def add_period_constraint(self, platform, clk, period):
        clk.attr.add("keep")
        period = math.floor(period*1e3)/1e3 # round to lowest picosecond
        if clk in self.clocks and period != self.clocks[clk]:
            raise ValueError("Clock already constrained to {:.2f}ns, new constraint to {:.2f}ns"
                .format(self.clocks[clk], period))
        self.clocks[clk] = period

    def add_false_path_constraint(self, platform, from_, to):
        from_.attr.add("keep")
        to.attr.add("keep")
        if (to, from_) not in self.false_paths:
            self.false_paths.add((from_, to))

def vivado_build_args(parser):
    toolchain_group = parser.add_argument_group(title="Toolchain options")
    toolchain_group.add_argument("--synth-mode", default="vivado", help="Synthesis mode (vivado or yosys).")

def vivado_build_argdict(args):
    return {"synth_mode": args.synth_mode}
